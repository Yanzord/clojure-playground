(or + -)
=> #object[clojure.core$_PLUS_ 0x48778eba "clojure.core$_PLUS_@48778eba"]
((or + -) 1 2 3)
=> 6
((and (= 1 1) +) 1 2 3)
=> 6
((first [+ 0]) 1 2 3)
=> 6
(inc 1.1)
=> 2.1
(map inc [0 1 2 3])
=> (1 2 3 4)
(defn too-enthusiastic
"Return a cheer that might be a bit too enthusiastic"
[name]
(str "OH. MY. GOD! " name " YOU ARE MOST DEFINITELY LIKE THE BEST "
         "MAN SLASH WOMAN EVER I LOVE YOU AND WE SHOULD RUN AWAY SOMEWHERE"))
(too-enthusiastic "Zelda")
=> #'user/too-enthusiastic
=>
"OH. MY. GOD! Zelda YOU ARE MOST DEFINITELY LIKE THE BEST MAN SLASH WOMAN EVER I LOVE YOU AND WE SHOULD RUN AWAY SOMEWHERE"
(defn x-chop
  "Describe the kind of chop you're inflicting on someone"
  ([name chop-type]
   (str "I " chop-type " chop " name "! Take that!"))
  ([name]
   (x-chop name "karate")))
=> #'user/x-chop
(x-chop "Kanye West" "slap")
=> "I slap chop Kanye West! Take that!"
(x-chop "Kanye East")
=> "I karate chop Kanye East! Take that!"
(defn codger-communication
  [whippersnapper]
  (str "Get off my lawn, " whippersnapper "!!!"))
=> #'user/codger-communication
(defn codger
  [& whippersnappers]
  (map codger-communication whippersnappers))
=> #'user/codger
(codger "Billy" "Anne-Marie" "The Incredible Bulk")
=> ("Get off my lawn, Billy!!!" "Get off my lawn, Anne-Marie!!!" "Get off my lawn, The Incredible Bulk!!!")
(defn favorite-things
  [name & things]
  (str "Hi, " name ", here are my favorite things: "
       (clojure.string/join ", " things)))
=> #'user/favorite-things
(favorite-things "Doreen" "gum" "shoes" "kara-te")
=> "Hi, Doreen, here are my favorite things: gum, shoes, kara-te"
;; Return the first element of a collection
(defn my-first
  [[first-thing]] ; Notice that first-thing is within a vector
  first-thing)
(my-first ["oven" "bike" "war-axe"])
=> #'user/my-first
=> "oven"
(defn chooser
  [[first-choice second-choice & unimportant-choices]]
  (println (str "Your first choice is: " first-choice))
  (println (str "Your second choice is: " second-choice))
  (println (str "We're ignoring the rest of your choices. "
                "Here they are in case you need to cry over them: "
                (clojure.string/join ", " unimportant-choices))))
(chooser ["Marmalade", "Handsome Jack", "Pigpen", "Aquaman"])
Your first choice is: Marmalade
Your second choice is: Handsome Jack
We're ignoring the rest of your choices. Here they are in case you need to cry over them: Pigpen, Aquaman
=> nil
(defn announce-treasure-location
  [{lat :lat lng :lng}]
  (println (str "Treasure lat: " lat))
  (println (str "Treasure lng: " lng)))
(announce-treasure-location {:lat 28.22 :lng 81.33})
Treasure lat: 28.22
Treasure lng: 81.33
=> #'user/announce-treasure-location
=> nil
(defn announce-treasure-location
  [{:keys [lat lng]}]
  (println (str "Treasure lat: " lat))
  (println (str "Treasure lng: " lng)))
=> #'user/announce-treasure-location
(announce-treasure-location {:lat 28.22 :lng 81.33})
Treasure lat: 28.22
Treasure lng: 81.33
=> nil
(defn receive-treasure-location
  [{:keys [lat lng] :as treasure-location}]
  (println (str "Treasure lat: " lat))
  (println (str "Treasure lng: " lng))
  ;; One would assume that this would put in new coordinates for your ship
  (steer-ship! treasure-location))
Syntax error compiling at (/tmp/form-init4146166671246127647.clj:6:3).
Unable to resolve symbol: steer-ship! in this context
(defn illustrative-function
  []
  (+ 1 304)
  30
  "joe")
(illustrative-function)
=> #'user/illustrative-function
=> "joe"
(defn number-comment
  [x]
  (if (> x 6)
    "Oh my gosh! What a big number!"
    "That number's OK, I guess"))
=> #'user/number-comment
(number-comment 5)
=> "That number's OK, I guess"
(number-comment 7)
=> "Oh my gosh! What a big number!"
(map (fn [name] (str "Hi, " name))
     ["Darth Vader" "Mr. Magoo"])
=> ("Hi, Darth Vader" "Hi, Mr. Magoo")
((fn [x] (* x 3)) 8)
=> 24
(def my-special-multiplier (fn [x] (* x 3)))
(my-special-multiplier 12)
=> #'user/my-special-multiplier
=> 36
(#(* % 3) 8)
=> 24
(map #(str "Hi, " %)
     ["Darth Vader" "Mr. Magoo"])
=> ("Hi, Darth Vader" "Hi, Mr. Magoo")
(#(str %1 " and " %2) "cornbread" "butter beans")
=> "cornbread and butter beans"
(#(identity %&) 1 "blarg" :yip)
=> (1 "blarg" :yip)
(defn inc-maker
  "Create a custom incrementor"
  [inc-by]
  #(+ % inc-by))
(def inc3 (inc-maker 3))
=> #'user/inc-maker
=> #'user/inc3
(inc3 7)
=> 10
