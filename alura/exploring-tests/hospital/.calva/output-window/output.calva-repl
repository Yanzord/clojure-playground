; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ‚ô•Ô∏è

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/yan.pereira/github/yan/clojure-playground/alura/exploring-tests/hospital; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:50037 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
; Execution error (FileNotFoundException) at hospital.core/eval9005 (REPL:42).
; Could not locate clojure/tools/namespace/repl__init.class, clojure/tools/namespace/repl.clj or clojure/tools/namespace/repl.cljc on classpath.
cljÍûâhospital.coreÍûâ>¬†
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
cljÍûâhospital.coreÍûâ>¬†
; Jack-in done.
cljÍûâhospital.coreÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic.clj
#'hospital.logic/transfere
cljÍûâhospital.logicÍûâ>¬†
; Evaluating file: model.clj
#'hospital.model/novo-hospital
cljÍûâhospital.modelÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; {:espera <-(5)-<, :raio-x <-(13 51)-<}
; 12 tests finished, all passing üëç, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/yan.pereira/github/yan/clojure-playground/alura/exploring-tests/hospital; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:50165 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
; Execution error (FileNotFoundException) at hospital.core/eval9006 (REPL:78).
; Could not locate clojure/tools/namespace/repl__init.class, clojure/tools/namespace/repl.clj or clojure/tools/namespace/repl.cljc on classpath.
cljÍûâhospital.coreÍûâ>¬†
; Jack-in done.
cljÍûâhospital.coreÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; No tests found. üò±, ns: 0, vars: 0
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic.clj
#'hospital.logic/transfere
cljÍûâhospital.logicÍûâ>¬†
; Evaluating file: model.clj
#'hospital.model/Paciente
cljÍûâhospital.modelÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; FAIL in hospital.logic-test/transfere-test (logic_test.clj:109):
; aceita pessoas se cabe
; expected:
{:espera [5], :raio-x [13 51]}

; actual:
{:espera [51], :raio-x (13 5)}

; diff:
- {:raio-x [13 51], :espera [5]}

+ {:raio-x <-(13 5)-<, :espera [51]}

; 12 tests finished, problems found. üò≠ errors: 0, failures: 1, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: model.clj
; 
; Execution error (ExceptionInfo) at schema.core/validator$fn (core.clj:155).
; Value does not match schema: (not (instance? java.lang.String 15))
; Evaluation of file model.clj failed: class clojure.lang.Compiler$CompilerException
cljÍûâhospital.modelÍûâ>¬†
; Evaluating file: model.clj
{:espera ["Yan" "Brenda"]}
cljÍûâhospital.modelÍûâ>¬†
; Evaluating file: logic.clj
#'hospital.logic/transfere
cljÍûâhospital.logicÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; FAIL in hospital.logic-test/transfere-test (logic_test.clj:109):
; aceita pessoas se cabe
; expected:
{:espera [5], :raio-x [13 51]}

; actual:
{:espera [51], :raio-x (13 5)}

; diff:
- {:raio-x [13 51], :espera [5]}

+ {:raio-x <-(13 5)-<, :espera [51]}

; 12 tests finished, problems found. üò≠ errors: 0, failures: 1, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; ERROR in hospital.logic-test/transfere-test (logic.clj:109):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [(named {:espera [(not (instance? java.lang.String 5))]} hospital) (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera #object[clojure.lang.PersistentQueue 0x5c64e92b "clojure.lang.PersistentQueue@24"], :raio-x []} :espera], :error [(named {:espera [(not (instance? java.lang.String 5))]} hospital) (named (not (sequential? :espera)) departamento)]} (logic.clj:109)
; expected:
(=
 {:espera [], :raio-x [5]}
 (transfere hospital-original :espera :raio-x))

; ERROR in hospital.logic-test/transfere-test (logic.clj:114):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [(named {:espera [(not (instance? java.lang.String 51)) (not (instance? java.lang.String 5))], :raio-x [(not (instance? java.lang.String 13))]} hospital) (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera [51 5], :raio-x #object[clojure.lang.PersistentQueue 0x1f5d8c1 "clojure.lang.PersistentQueue@2c"]} :espera], :error [(named {:espera [(not (instance? java.lang.String 51)) (not (instance? java.lang.String 5))], :raio-x [(not (instance? java.lang.String 13))]} hospital) (named (not (sequential? :espera)) departamento)]} (logic.clj:114)
; expected:
(=
 {:espera [5], :raio-x [13 51]}
 (transfere hospital-original :espera :raio-x))

; 12 tests finished, problems found. üò≠ errors: 2, failures: 0, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: model.clj
#'hospital.model/Hospital
cljÍûâhospital.modelÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; ERROR in hospital.logic-test/transfere-test (logic.clj:109):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [(named {:espera [(not (instance? java.lang.String 5))]} hospital) (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera #object[clojure.lang.PersistentQueue 0x67739f32 "clojure.lang.PersistentQueue@24"], :raio-x []} :espera], :error [(named {:espera [(not (instance? java.lang.String 5))]} hospital) (named (not (sequential? :espera)) departamento)]} (logic.clj:109)
; expected:
(=
 {:espera [], :raio-x [5]}
 (transfere hospital-original :espera :raio-x))

; ERROR in hospital.logic-test/transfere-test (logic.clj:114):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [(named {:espera [(not (instance? java.lang.String 51)) (not (instance? java.lang.String 5))], :raio-x [(not (instance? java.lang.String 13))]} hospital) (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera [51 5], :raio-x #object[clojure.lang.PersistentQueue 0x517bbb9d "clojure.lang.PersistentQueue@2c"]} :espera], :error [(named {:espera [(not (instance? java.lang.String 51)) (not (instance? java.lang.String 5))], :raio-x [(not (instance? java.lang.String 13))]} hospital) (named (not (sequential? :espera)) departamento)]} (logic.clj:114)
; expected:
(=
 {:espera [5], :raio-x [13 51]}
 (transfere hospital-original :espera :raio-x))

; 12 tests finished, problems found. üò≠ errors: 2, failures: 0, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: model.clj
{:espera <-("Yan" "Brenda")-<}
cljÍûâhospital.modelÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; ERROR in hospital.logic-test/transfere-test (logic.clj:109):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [(named {:espera [(not (instance? java.lang.String 5))]} hospital) (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera #object[clojure.lang.PersistentQueue 0x11c95d1f "clojure.lang.PersistentQueue@24"], :raio-x []} :espera], :error [(named {:espera [(not (instance? java.lang.String 5))]} hospital) (named (not (sequential? :espera)) departamento)]} (logic.clj:109)
; expected:
(=
 {:espera [], :raio-x [5]}
 (transfere hospital-original :espera :raio-x))

; ERROR in hospital.logic-test/transfere-test (logic.clj:114):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [(named {:espera [(not (instance? java.lang.String 51)) (not (instance? java.lang.String 5))], :raio-x [(not (instance? java.lang.String 13))]} hospital) (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera [51 5], :raio-x #object[clojure.lang.PersistentQueue 0x2e84823 "clojure.lang.PersistentQueue@2c"]} :espera], :error [(named {:espera [(not (instance? java.lang.String 51)) (not (instance? java.lang.String 5))], :raio-x [(not (instance? java.lang.String 13))]} hospital) (named (not (sequential? :espera)) departamento)]} (logic.clj:114)
; expected:
(=
 {:espera [5], :raio-x [13 51]}
 (transfere hospital-original :espera :raio-x))

; 12 tests finished, problems found. üò≠ errors: 2, failures: 0, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; ERROR in hospital.logic-test/transfere-test (logic.clj:109):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [nil (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera #object[clojure.lang.PersistentQueue 0x2d00fa5f "clojure.lang.PersistentQueue@54"], :raio-x []} :espera], :error [nil (named (not (sequential? :espera)) departamento)]} (logic.clj:109)
; expected:
(=
 {:espera [], :raio-x [5]}
 (transfere hospital-original :espera :raio-x))

; ERROR in hospital.logic-test/transfere-test (logic.clj:114):
; aceita pessoas se cabe
; error: clojure.lang.ExceptionInfo: Input to atende does not match schema: 

	   [nil (named (not (sequential? :espera)) departamento)]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {Keyword [java.lang.String]}, :optional? false, :name hospital} #schema.core.One{:schema [java.lang.String], :optional? false, :name departamento}], :value [{:espera #object[clojure.lang.PersistentQueue 0x4a59a793 "clojure.lang.PersistentQueue@d0da"], :raio-x #object[clojure.lang.PersistentQueue 0x2c2ada7f "clojure.lang.PersistentQueue@641"]} :espera], :error [nil (named (not (sequential? :espera)) departamento)]} (logic.clj:114)
; expected:
(=
 {:espera [5], :raio-x [13 51]}
 (transfere hospital-original :espera :raio-x))

; 12 tests finished, problems found. üò≠ errors: 2, failures: 0, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic.clj
#'hospital.logic/transfere
cljÍûâhospital.logicÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; FAIL in hospital.logic-test/transfere-test (logic_test.clj:108):
; aceita pessoas se cabe
; expected:
{:espera [], :raio-x [5]}

; actual:
{:espera (), :raio-x ("5")}

; diff:
- {:raio-x [5]}

+ {:raio-x <-("5")-<}

; FAIL in hospital.logic-test/transfere-test (logic_test.clj:112):
; aceita pessoas se cabe
; expected:
{:espera [5], :raio-x [13 51]}

; actual:
{:espera ("5"), :raio-x ("13" "51")}

; diff:
- {:raio-x [13 51], :espera [5]}

+ {:raio-x <-("13" "51")-<, :espera <-("5")-<}

; 12 tests finished, problems found. üò≠ errors: 0, failures: 2, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; 12 tests finished, all passing üëç, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic.clj
#'hospital.logic/transfere
cljÍûâhospital.logicÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; 12 tests finished, all passing üëç, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
; Evaluating file: logic.clj
#'hospital.logic/transfere
cljÍûâhospital.logicÍûâ>¬†
; Evaluating file: logic_test.clj
#'hospital.logic-test/transfere-test
cljÍûâhospital.logic-testÍûâ>¬†
; Running tests for the following namespaces:
;   hospital.logic-test
;   hospital.logic

; 12 tests finished, all passing üëç, ns: 1, vars: 3
cljÍûâhospital.logic-testÍûâ>¬†
